
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.19.0
 * Query Engine version: c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d
 */
Prisma.prismaVersion = {
  client: "2.19.0",
  engine: "c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AlumniScalarFieldEnum = makeEnum({
  Register_No: 'Register_No',
  Working_Org: 'Working_Org',
  Designation: 'Designation',
  Alumni_Status: 'Alumni_Status'
});

exports.Prisma.Course_artimatScalarFieldEnum = makeEnum({
  cartimat_id: 'cartimat_id',
  course_code: 'course_code',
  conum: 'conum',
  costmt: 'costmt',
  po1: 'po1',
  po2: 'po2',
  po3: 'po3',
  po4: 'po4',
  po5: 'po5',
  po6: 'po6',
  po7: 'po7',
  po8: 'po8',
  po9: 'po9',
  po10: 'po10',
  po11: 'po11',
  po12: 'po12',
  ps1: 'ps1',
  ps2: 'ps2',
  ps3: 'ps3'
});

exports.Prisma.Course_assessevalScalarFieldEnum = makeEnum({
  cassesseval_id: 'cassesseval_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  assess_num: 'assess_num',
  question_num: 'question_num',
  reg_no: 'reg_no',
  mark: 'mark'
});

exports.Prisma.Course_assessmentScalarFieldEnum = makeEnum({
  cassess_id: 'cassess_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  assess_num: 'assess_num',
  question_num: 'question_num',
  question_stmt: 'question_stmt',
  question_img: 'question_img',
  blooms_level: 'blooms_level',
  co_num: 'co_num',
  marks: 'marks',
  entry_date: 'entry_date',
  section: 'section'
});

exports.Prisma.Course_assignevalScalarFieldEnum = makeEnum({
  cassigneval_id: 'cassigneval_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  assign_num: 'assign_num',
  question_num: 'question_num',
  reg_no: 'reg_no',
  mark: 'mark'
});

exports.Prisma.Course_assignmentScalarFieldEnum = makeEnum({
  cassign_id: 'cassign_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  entry_date: 'entry_date',
  assign_num: 'assign_num',
  question_num: 'question_num',
  question_stmt: 'question_stmt',
  question_img: 'question_img',
  co_num: 'co_num',
  marks: 'marks',
  deadline: 'deadline'
});

exports.Prisma.Course_attendanceScalarFieldEnum = makeEnum({
  cattend_id: 'cattend_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  reg_no: 'reg_no',
  date: 'date',
  period: 'period',
  presence: 'presence'
});

exports.Prisma.Course_cacompScalarFieldEnum = makeEnum({
  ccacomp_id: 'ccacomp_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  type: 'type',
  number: 'number',
  weightage: 'weightage'
});

exports.Prisma.Course_evaluationScalarFieldEnum = makeEnum({
  ceval_id: 'ceval_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  type: 'type',
  total_mark: 'total_mark',
  marks_obtained: 'marks_obtained',
  reg_no: 'reg_no',
  number: 'number',
  weighted_mark: 'weighted_mark'
});

exports.Prisma.Course_extcalcScalarFieldEnum = makeEnum({
  cextcalc_id: 'cextcalc_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  reg_num: 'reg_num',
  question_num: 'question_num',
  marks: 'marks'
});

exports.Prisma.Course_extcompScalarFieldEnum = makeEnum({
  cextcomp_id: 'cextcomp_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  question_num: 'question_num',
  question_co: 'question_co',
  question_mark: 'question_mark',
  question_section: 'question_section'
});

exports.Prisma.Course_internalcalcScalarFieldEnum = makeEnum({
  cintcalc_id: 'cintcalc_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  reg_no: 'reg_no',
  ca: 'ca',
  midterm: 'midterm',
  total_marks: 'total_marks'
});

exports.Prisma.Course_lessonplanScalarFieldEnum = makeEnum({
  clp_id: 'clp_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  actual_date: 'actual_date',
  period: 'period',
  course_ctopic_id: 'course_ctopic_id',
  references: 'references'
});

exports.Prisma.Course_listScalarFieldEnum = makeEnum({
  course_code: 'course_code',
  stream: 'stream',
  regulation: 'regulation',
  semester: 'semester',
  title: 'title',
  credit: 'credit',
  objectives: 'objectives'
});

exports.Prisma.Course_registered_studentsScalarFieldEnum = makeEnum({
  cregst_id: 'cregst_id',
  course_code: 'course_code',
  reg_no: 'reg_no',
  semester: 'semester',
  group_ref: 'group_ref',
  session_ref: 'session_ref'
});

exports.Prisma.Course_topicScalarFieldEnum = makeEnum({
  ctopic_id: 'ctopic_id',
  course_code: 'course_code',
  module_num: 'module_num',
  topic_num: 'topic_num',
  topic: 'topic',
  conum: 'conum'
});

exports.Prisma.PersonScalarFieldEnum = makeEnum({
  Person_ID: 'Person_ID',
  Prefix_Ref: 'Prefix_Ref',
  First_Name: 'First_Name',
  Last_Name: 'Last_Name',
  Gender_Ref: 'Gender_Ref',
  DOB: 'DOB',
  Designation: 'Designation',
  Community_Ref: 'Community_Ref',
  Caste: 'Caste',
  Primary_MailID: 'Primary_MailID',
  Secondary_MailID: 'Secondary_MailID',
  Aadhar_Card: 'Aadhar_Card',
  PAN_Card: 'PAN_Card',
  Passport_Number: 'Passport_Number',
  Primary_ContactNumber: 'Primary_ContactNumber',
  Secondary_ContactNumber: 'Secondary_ContactNumber',
  Intercom_Number: 'Intercom_Number',
  Alias_Name: 'Alias_Name',
  Address_Line1: 'Address_Line1',
  Address_Line2: 'Address_Line2',
  Address_Line3: 'Address_Line3',
  Address_Line4: 'Address_Line4',
  Photo: 'Photo',
  Marital_Status_Ref: 'Marital_Status_Ref',
  Room_Num: 'Room_Num'
});

exports.Prisma.Person_academicScalarFieldEnum = makeEnum({
  Academic_ID: 'Academic_ID',
  Person_ID: 'Person_ID',
  Course_Code: 'Course_Code',
  Session: 'Session',
  Semester: 'Semester',
  Group: 'Group',
  Degree_Ref: 'Degree_Ref',
  Branch_Ref: 'Branch_Ref',
  Class_Time: 'Class_Time',
  Class_Type_Ref: 'Class_Type_Ref'
});

exports.Prisma.Person_additional_dutiesScalarFieldEnum = makeEnum({
  Duty_ID: 'Duty_ID',
  Person_ID: 'Person_ID',
  Duty_Allotted: 'Duty_Allotted',
  Organization: 'Organization',
  Description: 'Description',
  Start_Date: 'Start_Date',
  End_Date: 'End_Date'
});

exports.Prisma.Person_awardsScalarFieldEnum = makeEnum({
  Award_ID: 'Award_ID',
  Person_ID: 'Person_ID',
  Title: 'Title',
  Organization: 'Organization',
  Place: 'Place',
  Start_Year: 'Start_Year',
  Details: 'Details'
});

exports.Prisma.Person_course_detailsScalarFieldEnum = makeEnum({
  Course_ID: 'Course_ID',
  Course_Code: 'Course_Code',
  Course_Name: 'Course_Name',
  Regulation: 'Regulation',
  Credit: 'Credit'
});

exports.Prisma.Person_events_attendedScalarFieldEnum = makeEnum({
  Event_ID: 'Event_ID',
  Person_ID: 'Person_ID',
  Event_Type_Ref: 'Event_Type_Ref',
  Level_Ref: 'Level_Ref',
  Event_Title: 'Event_Title',
  Hosting_Organization: 'Hosting_Organization',
  Place: 'Place',
  Participation_Status_Ref: 'Participation_Status_Ref',
  Role: 'Role',
  Start_Date: 'Start_Date',
  End_Date: 'End_Date',
  Funding_Agency: 'Funding_Agency',
  No_Of_Participants: 'No_Of_Participants',
  Summary_File: 'Summary_File',
  Event_Schedule: 'Event_Schedule',
  Participants_Lists: 'Participants_Lists',
  Budget: 'Budget'
});

exports.Prisma.Person_experienceScalarFieldEnum = makeEnum({
  Experience_ID: 'Experience_ID',
  Person_ID: 'Person_ID',
  Designation_Ref: 'Designation_Ref',
  Organization: 'Organization',
  Department: 'Department',
  Start_Date: 'Start_Date',
  End_Date: 'End_Date',
  Emp_Category_Ref: 'Emp_Category_Ref',
  Work_Nature_Ref: 'Work_Nature_Ref',
  Position_Held: 'Position_Held'
});

exports.Prisma.Person_guestlectureScalarFieldEnum = makeEnum({
  GuestLecture_ID: 'GuestLecture_ID',
  Person_ID: 'Person_ID',
  Level_Ref: 'Level_Ref',
  Topic: 'Topic',
  Programme: 'Programme',
  Organization: 'Organization',
  Place: 'Place',
  Start_Date: 'Start_Date'
});

exports.Prisma.Person_membershipScalarFieldEnum = makeEnum({
  Member_ID: 'Member_ID',
  Person_ID: 'Person_ID',
  Prof_Body: 'Prof_Body',
  Membership_NUM: 'Membership_NUM',
  Member_Type: 'Member_Type',
  Sart_Date: 'Sart_Date',
  End_Date: 'End_Date'
});

exports.Prisma.Person_patentsScalarFieldEnum = makeEnum({
  Patent_ID: 'Patent_ID',
  Person_ID: 'Person_ID',
  Title: 'Title',
  Patent_Number: 'Patent_Number',
  Start_Date: 'Start_Date',
  Place: 'Place',
  Patent_Status_Ref: 'Patent_Status_Ref',
  Patent_Copy: 'Patent_Copy'
});

exports.Prisma.Person_project_allocationScalarFieldEnum = makeEnum({
  Project_ID: 'Project_ID',
  Person_ID: 'Person_ID',
  Qualification_Level_Ref: 'Qualification_Level_Ref',
  Batch_ID: 'Batch_ID',
  Reg_Num: 'Reg_Num',
  Title: 'Title',
  Project_Domain: 'Project_Domain',
  Start_Date: 'Start_Date',
  End_Date: 'End_Date'
});

exports.Prisma.Person_project_proposalScalarFieldEnum = makeEnum({
  Proposal_ID: 'Proposal_ID',
  Person_ID: 'Person_ID',
  Title: 'Title',
  Project_Type_Ref: 'Project_Type_Ref',
  PI_Name: 'PI_Name',
  COI1_Name: 'COI1_Name',
  Status_Ref: 'Status_Ref',
  Fund_Agency: 'Fund_Agency',
  TotalSanctionedAmount: 'TotalSanctionedAmount',
  Start_Date: 'Start_Date',
  End_Date: 'End_Date',
  Dept: 'Dept',
  Co_Dept: 'Co_Dept',
  Co_Institution: 'Co_Institution',
  Abstract: 'Abstract',
  PI_Institution: 'PI_Institution',
  Proposal_Copy: 'Proposal_Copy'
});

exports.Prisma.Person_publicationScalarFieldEnum = makeEnum({
  Publication_ID: 'Publication_ID',
  Person_ID: 'Person_ID',
  Publication_Type_Ref: 'Publication_Type_Ref',
  Level_Ref: 'Level_Ref',
  Paper_Title: 'Paper_Title',
  First_Author: 'First_Author',
  Second_Author: 'Second_Author',
  Other_Authors: 'Other_Authors',
  Journal_Name: 'Journal_Name',
  Volume: 'Volume',
  Issue: 'Issue',
  DOI: 'DOI',
  Year_Of_Publish: 'Year_Of_Publish',
  Start_Page_No: 'Start_Page_No',
  End_Page_No: 'End_Page_No',
  Publisher: 'Publisher',
  Impact_Factor: 'Impact_Factor'
});

exports.Prisma.Person_qualificationScalarFieldEnum = makeEnum({
  Qualification_ID: 'Qualification_ID',
  Person_ID: 'Person_ID',
  Qualification_Level_Ref: 'Qualification_Level_Ref',
  Degree_Ref: 'Degree_Ref',
  Branch_Ref: 'Branch_Ref',
  Institution: 'Institution',
  University: 'University',
  Start_Date: 'Start_Date',
  End_Date: 'End_Date',
  Class_Obtained_Ref: 'Class_Obtained_Ref',
  Thesis_Title: 'Thesis_Title',
  Specialization: 'Specialization',
  Faculty_Research: 'Faculty_Research'
});

exports.Prisma.Person_reference_tableScalarFieldEnum = makeEnum({
  Reference_ID: 'Reference_ID',
  Category: 'Category',
  Ref_Name: 'Ref_Name',
  Description: 'Description'
});

exports.Prisma.Person_responsibilityScalarFieldEnum = makeEnum({
  Responsibility_ID: 'Responsibility_ID',
  Person_ID: 'Person_ID',
  Responsibility_Ref: 'Responsibility_Ref',
  Description: 'Description',
  Start_Date: 'Start_Date',
  End_Date: 'End_Date'
});

exports.Prisma.Person_scholardetailsScalarFieldEnum = makeEnum({
  Scholar_ID: 'Scholar_ID',
  Person_ID: 'Person_ID',
  Reg_No: 'Reg_No',
  Scholar_Name: 'Scholar_Name',
  Title: 'Title',
  Status_Ref: 'Status_Ref',
  Guide_Type_Ref: 'Guide_Type_Ref',
  Fellowship_Received_Ref: 'Fellowship_Received_Ref',
  Fellowship_Agency: 'Fellowship_Agency',
  Fellowship_Amount: 'Fellowship_Amount',
  Year_Of_Registration: 'Year_Of_Registration',
  Research_Area: 'Research_Area',
  Registration_Mode_Ref: 'Registration_Mode_Ref',
  Fellowship_Name: 'Fellowship_Name',
  Fellowship_Year: 'Fellowship_Year',
  Year_Of_Completion: 'Year_Of_Completion'
});

exports.Prisma.Person_specializationScalarFieldEnum = makeEnum({
  Specialization_ID: 'Specialization_ID',
  Person_ID: 'Person_ID',
  AOS1: 'AOS1',
  AOS2: 'AOS2',
  AOS3: 'AOS3',
  AOS4: 'AOS4',
  AOS5: 'AOS5'
});

exports.Prisma.Person_supervisionScalarFieldEnum = makeEnum({
  Supervision_ID: 'Supervision_ID',
  Person_ID: 'Person_ID',
  Degree_Ref: 'Degree_Ref',
  Guide_Type_Ref: 'Guide_Type_Ref',
  Reg_No: 'Reg_No',
  Start_Year: 'Start_Year',
  End_Year: 'End_Year',
  Status_Ref: 'Status_Ref'
});

exports.Prisma.Person_travel_historyScalarFieldEnum = makeEnum({
  Travel_ID: 'Travel_ID',
  Person_ID: 'Person_ID',
  Title: 'Title',
  Start_Date: 'Start_Date',
  End_Date: 'End_Date',
  Organization: 'Organization',
  Place: 'Place',
  Agency: 'Agency',
  Purpose: 'Purpose'
});

exports.Prisma.Staff_listScalarFieldEnum = makeEnum({
  staff_id: 'staff_id',
  name: 'name'
});

exports.Prisma.StudentScalarFieldEnum = makeEnum({
  Register_No: 'Register_No',
  First_Name: 'First_Name',
  Middle_Name: 'Middle_Name',
  Last_Name: 'Last_Name',
  Gender_Ref: 'Gender_Ref',
  DOB: 'DOB',
  Community_Ref: 'Community_Ref',
  Caste: 'Caste',
  MailID: 'MailID',
  Aadhar_Card: 'Aadhar_Card',
  Primary_ContactNumber: 'Primary_ContactNumber',
  Secondary_ContactNumber: 'Secondary_ContactNumber',
  Address_Line1: 'Address_Line1',
  Address_Line2: 'Address_Line2',
  Address_Line3: 'Address_Line3',
  Address_Line4: 'Address_Line4',
  Correspondence_Address: 'Correspondence_Address',
  Photo: 'Photo',
  Residential_Type_Ref: 'Residential_Type_Ref',
  FA: 'FA',
  Programme_Ref: 'Programme_Ref',
  Branch_Ref: 'Branch_Ref',
  Registration_Mode_Ref: 'Registration_Mode_Ref',
  Blood_Group_Ref: 'Blood_Group_Ref',
  GATE_Cutoff_Mark: 'GATE_Cutoff_Mark',
  Admission_Date: 'Admission_Date',
  Admission_Category_Ref: 'Admission_Category_Ref',
  Scholarship_Received_Ref: 'Scholarship_Received_Ref',
  Scholarship_Details: 'Scholarship_Details',
  NSS_NSO_YRC_Volunteer_Ref: 'NSS_NSO_YRC_Volunteer_Ref',
  Hostel_Block_Room: 'Hostel_Block_Room'
});

exports.Prisma.Student_awardsScalarFieldEnum = makeEnum({
  Award_ID: 'Award_ID',
  Register_No: 'Register_No',
  Award_Name: 'Award_Name',
  Organizer_Name: 'Organizer_Name',
  Award_Type_Ref: 'Award_Type_Ref',
  Award_Category_Ref: 'Award_Category_Ref',
  Place_of_Event: 'Place_of_Event',
  Certificate_Copy: 'Certificate_Copy',
  Award_Date: 'Award_Date'
});

exports.Prisma.Student_endsemmarksScalarFieldEnum = makeEnum({
  Mark_ID: 'Mark_ID',
  Register_No: 'Register_No',
  Semester: 'Semester',
  Course_Code: 'Course_Code',
  Session_Ref: 'Session_Ref',
  Grade: 'Grade',
  Credits: 'Credits',
  Entry_Date: 'Entry_Date'
});

exports.Prisma.Student_events_participatedScalarFieldEnum = makeEnum({
  Event_ID: 'Event_ID',
  Register_No: 'Register_No',
  Event_Name: 'Event_Name',
  Event_Type_Ref: 'Event_Type_Ref',
  Participation_Type_Ref: 'Participation_Type_Ref',
  Team_Size: 'Team_Size',
  Event_Organizer: 'Event_Organizer',
  Event_Date: 'Event_Date',
  Prize_Won_Details: 'Prize_Won_Details',
  Certificate_Copy: 'Certificate_Copy'
});

exports.Prisma.Student_family_detailsScalarFieldEnum = makeEnum({
  Family_ID: 'Family_ID',
  Register_No: 'Register_No',
  Father_Name: 'Father_Name',
  Mother_Name: 'Mother_Name',
  Father_ContactNumber: 'Father_ContactNumber',
  Mother_ContactNumber: 'Mother_ContactNumber',
  Father_MailID: 'Father_MailID',
  Mother_MailID: 'Mother_MailID',
  Father_Occupation: 'Father_Occupation',
  Mother_Occupation: 'Mother_Occupation',
  Father_Affilation: 'Father_Affilation',
  Mother_Affilation: 'Mother_Affilation',
  Father_Company: 'Father_Company',
  Mother_Company: 'Mother_Company',
  Parents_Annual_Income: 'Parents_Annual_Income',
  Local_Guardian_Name: 'Local_Guardian_Name',
  Local_Guardian_Address: 'Local_Guardian_Address',
  Local_Guardian_Contact_Number: 'Local_Guardian_Contact_Number'
});

exports.Prisma.Student_gpaScalarFieldEnum = makeEnum({
  Gpa_ID: 'Gpa_ID',
  Register_No: 'Register_No',
  Semester: 'Semester',
  GPA: 'GPA',
  Grade_Sheet: 'Grade_Sheet'
});

exports.Prisma.Student_higherstudiesScalarFieldEnum = makeEnum({
  HigherStudies_ID: 'HigherStudies_ID',
  Register_No: 'Register_No',
  University: 'University',
  Degree: 'Degree',
  Specialization: 'Specialization',
  Admission_Mode_Ref: 'Admission_Mode_Ref',
  Score: 'Score',
  Country: 'Country',
  Location: 'Location',
  LOR_Details: 'LOR_Details',
  Score_Card_Copy: 'Score_Card_Copy'
});

exports.Prisma.Student_internshipScalarFieldEnum = makeEnum({
  Internship_ID: 'Internship_ID',
  Register_No: 'Register_No',
  Company: 'Company',
  Title: 'Title',
  Order_Copy: 'Order_Copy',
  Address: 'Address',
  Start_Date: 'Start_Date',
  End_Date: 'End_Date',
  Stiphend_Option_Ref: 'Stiphend_Option_Ref',
  Stiphend_Amount: 'Stiphend_Amount',
  Selection_Mode_Ref: 'Selection_Mode_Ref'
});

exports.Prisma.Student_placementScalarFieldEnum = makeEnum({
  Placement_ID: 'Placement_ID',
  Register_No: 'Register_No',
  Company: 'Company',
  Package: 'Package',
  Appointment_Order_Copy: 'Appointment_Order_Copy',
  Location: 'Location',
  Designation: 'Designation',
  Appointment_OrderNum: 'Appointment_OrderNum',
  Appointment_Letter_IssueDate: 'Appointment_Letter_IssueDate',
  Joining_Date: 'Joining_Date',
  Placement_Type_Ref: 'Placement_Type_Ref'
});

exports.Prisma.Subj_allotScalarFieldEnum = makeEnum({
  sallot_id: 'sallot_id',
  staff_id: 'staff_id',
  course_code: 'course_code',
  group_ref: 'group_ref',
  session_ref: 'session_ref',
  class_room: 'class_room',
  student_count: 'student_count'
});

exports.Prisma.User_infoScalarFieldEnum = makeEnum({
  user_ID: 'user_ID',
  username: 'username',
  user_role: 'user_role',
  password: 'password',
  status: 'status',
  create_time: 'create_time',
  refresh_token: 'refresh_token',
  updated_time: 'updated_time'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  alumni: 'alumni',
  course_artimat: 'course_artimat',
  course_assesseval: 'course_assesseval',
  course_assessment: 'course_assessment',
  course_assigneval: 'course_assigneval',
  course_assignment: 'course_assignment',
  course_attendance: 'course_attendance',
  course_cacomp: 'course_cacomp',
  course_evaluation: 'course_evaluation',
  course_extcalc: 'course_extcalc',
  course_extcomp: 'course_extcomp',
  course_internalcalc: 'course_internalcalc',
  course_lessonplan: 'course_lessonplan',
  course_list: 'course_list',
  course_registered_students: 'course_registered_students',
  course_topic: 'course_topic',
  person: 'person',
  person_academic: 'person_academic',
  person_additional_duties: 'person_additional_duties',
  person_awards: 'person_awards',
  person_course_details: 'person_course_details',
  person_events_attended: 'person_events_attended',
  person_experience: 'person_experience',
  person_guestlecture: 'person_guestlecture',
  person_membership: 'person_membership',
  person_patents: 'person_patents',
  person_project_allocation: 'person_project_allocation',
  person_project_proposal: 'person_project_proposal',
  person_publication: 'person_publication',
  person_qualification: 'person_qualification',
  person_reference_table: 'person_reference_table',
  person_responsibility: 'person_responsibility',
  person_scholardetails: 'person_scholardetails',
  person_specialization: 'person_specialization',
  person_supervision: 'person_supervision',
  person_travel_history: 'person_travel_history',
  staff_list: 'staff_list',
  student: 'student',
  student_awards: 'student_awards',
  student_endsemmarks: 'student_endsemmarks',
  student_events_participated: 'student_events_participated',
  student_family_details: 'student_family_details',
  student_gpa: 'student_gpa',
  student_higherstudies: 'student_higherstudies',
  student_internship: 'student_internship',
  student_placement: 'student_placement',
  subj_allot: 'subj_allot',
  user_info: 'user_info'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
