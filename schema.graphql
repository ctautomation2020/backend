type Query {
  login(data: credentialQueryInput!): loginPayload!
  allPersons: [Person!]!
  person: Person!
  experience(data: experienceQueryInput): person_experience
  person_experiences(data: PersonQueryInput): [person_experience]
  publication(data: Person_PublicationQueryInput!): Person_Publication
  person_publications(data: Person_QueryInput!): [Person_Publication]
  qualification(data: Qualification_InputQuery!): Person_Qualification!
  personQualifications(data: Person_QualificationsInputQuery): [Person_Qualification]
  personReference(data: Person_Reference_Input): [Person_Reference_Table]
}

type Mutation {
  createUser(data: createCredentialsInput!): credentialPayload
  updateUser(data: updateCredentialsInput!): credentialPayload
  createPerson(data: createPersonInput!): Person!
  updatePerson(data: updatePersonInput!): Person!
  createPersonExperience(data: experienceInput!): person_experience!
  updatePersonExperience(data: experienceUpdateInput!): person_experience!
  deletePersonExperience(data: experienceDeleteInput!): person_experience!
  createPersonPublication(data: Person_PublicationInput!): Person_Publication!
  updatePersonPublication(data: Person_PublicationUpdateInput!): Person_Publication!
  deletePersonPublication(data: Person_PublicationDeleteInput!): Person_Publication!
  createPersonQualification(data: Person_QualificationInput!): Person_Qualification!
  updatePersonQualification(data: Person_QualificationUpdateInput!): Person_Qualification!
  deletePersonQualification(data: Qualification_InputQuery!): Person_Qualification
}

type credentials {
  Credentials_ID: Int
  Person_ID: Int!
  Username: String!
  Password: String!
  person: Person!
}

input createCredentialsInput {
  Person_ID: Int!
  Username: String!
  Password: String!
}

type credentialPayload {
  Credentials_ID: Int
  Person_ID: Int!
  Username: String!
}

input updateCredentialsInput {
  Person_ID: Int!
  Username: String
  Password: String
}

input credentialQueryInput {
  Username: String!
  Password: String!
}

type loginPayload {
  token: String!
}

type Person {
  Person_ID: Int!
  Prefix_Ref: Int
  First_Name: String
  Last_Name: String
  Gender_Ref: Int
  DOB: String
  Community_Ref: Int
  Caste: String
  Primary_MailID: String
  Secondary_MailID: String
  Aadhar_Card: Float
  PAN_Card: String
  Passport_Number: String
  Primary_ContactNumber: String
  Secondary_ContactNumber: String
  Intercom_Number: String
  Alias_Name: String
  Address_Line1: String
  Address_Line2: String
  Address_Line3: String
  Address_Line4: String
  Marital_Status_Ref: Int
  Room_Num: String
  Person_Qualification: [Person_Qualification!]!
}

input personInput {
  Person_ID: Int!
}

input createPersonInput {
  Person_ID: Int!
  Prefix_Ref: Int
  First_Name: String
  Last_Name: String
  Gender_Ref: Int
  DOB: String
  Community_Ref: Int
  Caste: String
  Primary_MailID: String
  Secondary_MailID: String
  Aadhar_Card: Float
  PAN_Card: String
  Passport_Number: String
  Primary_ContactNumber: String
  Secondary_ContactNumber: String
  Intercom_Number: String
  Alias_Name: String
  Address_Line1: String
  Address_Line2: String
  Address_Line3: String
  Address_Line4: String
  Marital_Status_Ref: Int
  Room_Num: String
}

input updatePersonInput {
  Person_ID: Int!
  Prefix_Ref: Int
  First_Name: String
  Last_Name: String
  Gender_Ref: Int
  DOB: String
  Community_Ref: Int
  Caste: String
  Primary_MailID: String
  Secondary_MailID: String
  Aadhar_Card: Float
  PAN_Card: String
  Passport_Number: String
  Primary_ContactNumber: String
  Secondary_ContactNumber: String
  Intercom_Number: String
  Alias_Name: String
  Address_Line1: String
  Address_Line2: String
  Address_Line3: String
  Address_Line4: String
  Marital_Status_Ref: Int
  Room_Num: String
}

type person_experience {
  Experience_ID: Int!
  Person_ID: Int!
  Designation_Ref: Int
  Organization: String
  Department: String
  Start_Date: String
  End_Date: String
  Emp_Category_Ref: Int
  Work_Nature_Ref: Int
  Position_Held: String
}

input experienceQueryInput {
  Experience_ID: Int!
}

input PersonQueryInput {
  Person_ID: Int!
}

input experienceInput {
  Designation_Ref: Int
  Organization: String
  Department: String
  Start_Date: String
  End_Date: String
  Emp_Category_Ref: Int
  Work_Nature_Ref: Int
  Position_Held: String
}

input experienceUpdateInput {
  Experience_ID: Int!
  Designation_Ref: Int
  Organization: String
  Department: String
  Start_Date: String
  End_Date: String
  Emp_Category_Ref: Int
  Work_Nature_Ref: Int
  Position_Held: String
}

input experienceDeleteInput {
  Experience_ID: Int!
}

type Person_Publication {
  Publication_ID: Int!
  Person_ID: Int!
  Publication_Type_Ref: Int
  Level_Ref: Int
  Paper_Title: String
  First_Author: String
  Second_Author: String
  Other_Authors: String
  Journal_Name: String
  Volume: Int
  Issue: Int
  DOI: String
  Year_Of_Publish: Int
  Start_Page_No: Int
  End_Page_No: Int
  Publisher: String
  Impact_Factor: Float
}

input Person_PublicationInput {
  Publication_ID: Int
  Person_ID: Int!
  Publication_Type_Ref: Int
  Level_Ref: Int
  Paper_Title: String
  First_Author: String
  Second_Author: String
  Other_Authors: String
  Journal_Name: String
  Volume: Int
  Issue: Int
  DOI: String
  Year_Of_Publish: Int
  Start_Page_No: Int
  End_Page_No: Int
  Publisher: String
  Impact_Factor: Float
}

input Person_PublicationUpdateInput {
  Publication_ID: Int!
  Person_ID: Int
  Publication_Type_Ref: Int
  Level_Ref: Int
  Paper_Title: String
  First_Author: String
  Second_Author: String
  Other_Authors: String
  Journal_Name: String
  Volume: Int
  Issue: Int
  DOI: String
  Year_Of_Publish: Int
  Start_Page_No: Int
  End_Page_No: Int
  Publisher: String
  Impact_Factor: Float
}

input Person_PublicationDeleteInput {
  Publication_ID: Int!
}

input Person_PublicationQueryInput {
  Publication_ID: Int!
}

input Person_QueryInput {
  Person_ID: Int!
}

type Person_Qualification {
  Qualification_ID: Int!
  Person_ID: Int!
  Qualification_Level_Ref: Int
  Degree_Ref: Int
  Branch_Ref: Int
  Institution: String
  University: String
  Start_Date: Int
  End_Date: Int
  Class_Obtained_Ref: Int
  Thesis_Title: String
  Specialization: String
  Faculty_Research: String
}

input Person_QualificationInput {
  Qualification_ID: Int
  Person_ID: Int!
  Qualification_Level_Ref: Int
  Degree_Ref: Int
  Branch_Ref: Int
  Institution: String
  University: String
  Start_Date: Int
  End_Date: Int
  Class_Obtained_Ref: Int
  Thesis_Title: String
  Specialization: String
  Faculty_Research: String
}

input Person_QualificationUpdateInput {
  Qualification_ID: Int!
  Person_ID: Int
  Qualification_Level_Ref: Int
  Degree_Ref: Int
  Branch_Ref: Int
  Institution: String
  University: String
  Start_Date: Int
  End_Date: Int
  Class_Obtained_Ref: Int
  Thesis_Title: String
  Specialization: String
  Faculty_Research: String
}

input Qualification_InputQuery {
  Qualification_ID: Int!
}

input Person_QualificationsInputQuery {
  Person_ID: Int!
}

type Person_Reference_Table {
  Reference_ID: Int!
  Ref_Code: Int
  Category: String
  Ref_Name: String
  Description: String
}

input Person_Reference_Input {
  Reference_ID: Int
  Category: String
}

schema {
  query: Query
  mutation: Mutation
}
